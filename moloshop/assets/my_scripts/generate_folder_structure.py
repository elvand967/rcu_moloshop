
# moloshop/assets/my_scripts/generate_folder_structure.py

'''
üóÇ GUI-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
'''

import os
import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog
from tkinter.scrolledtext import ScrolledText

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º, –Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º (—Å –ø–æ–º–µ—Ç–∫–æ–π)
DEFAULT_NAME_EXCLUSIONS = [
    ".idea", ".venv", ".git", "__pycache__", "migrations", "media"
]

def print_tree(path, abs_exclusions, name_exclusions,
               prefix="", is_last=True, output_lines=None):
    """
    –°—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ —Å –¥–≤—É–º—è —Ç–∏–ø–∞–º–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π:
    - abs_exclusions: –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ -- –ø–æ–ª–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –æ—Ç—á—ë—Ç–∞ (–Ω–µ –≤—ã–≤–æ–¥—è—Ç—Å—è)
    - name_exclusions: –ø–∞–ø–∫–∏ –ø–æ –∏–º–µ–Ω–∏ -- –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Å –ø–æ–º–µ—Ç–∫–æ–π [—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä—ã—Ç–æ], —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è
    """
    if output_lines is None:
        output_lines = []

    abs_path = os.path.abspath(path)
    name = os.path.basename(path)

    # –ü–æ–ª–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
    if abs_path in abs_exclusions:
        return output_lines

    show_only_folder = name in name_exclusions and os.path.isdir(path)
    connector = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "

    if name == "":
        output_lines.append(abs_path.upper())
    else:
        output_lines.append(
            f"{prefix}{connector}{name}{' [—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä—ã—Ç–æ]' if show_only_folder else ''}"
        )

    if show_only_folder:
        return output_lines

    new_prefix = prefix + ("    " if is_last else "‚îÇ   ")

    try:
        entries = os.listdir(path)
    except PermissionError:
        output_lines.append(f"{new_prefix}<–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è {name}>")
        return output_lines

    entries = [
        e for e in entries
        if os.path.abspath(os.path.join(path, e)) not in abs_exclusions
    ]

    dirs = [e for e in entries if os.path.isdir(os.path.join(path, e))]
    files = [e for e in entries if os.path.isfile(os.path.join(path, e))]
    dirs.sort()
    files.sort()

    for i, file in enumerate(files):
        is_last_file = (i == len(files) - 1) and (len(dirs) == 0)
        file_connector = "‚îî‚îÄ‚îÄ " if is_last_file else "‚îú‚îÄ‚îÄ "
        output_lines.append(f"{new_prefix}{file_connector}{file}")

    for i, directory in enumerate(dirs):
        is_last_dir = (i == len(dirs) - 1)
        print_tree(
            os.path.join(path, directory),
            abs_exclusions,
            name_exclusions,
            new_prefix,
            is_last_dir,
            output_lines,
        )
    return output_lines


def generate_tree_report(base_path, abs_exclusions, name_exclusions, output_file):
    lines = print_tree(base_path, abs_exclusions, name_exclusions)
    with open(output_file, "w", encoding="utf-8") as f:
        for line in lines:
            f.write(line + "\n")
    return lines


def launch_gui():
    def rel_path(path):
        base = base_path_var.get()
        try:
            return os.path.relpath(path, start=base)
        except Exception:
            return path

    def abs_path(path):
        base = base_path_var.get()
        if os.path.isabs(path):
            return path
        return os.path.abspath(os.path.join(base, path))

    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π:
    # –ö–æ—Ä—Ç–µ–∂–∏ —Ñ–æ—Ä–º–∞—Ç–∞: ("abs", –ø–æ–ª–Ω—ã–π_–ø—É—Ç—å) –∏–ª–∏ ("name", –∏–º—è_–ø–∞–ø–∫–∏)
    exceptions = []

    def update_exceptions_listbox():
        exceptions_listbox.delete(0, tk.END)
        base = base_path_var.get()
        for ex_type, val in exceptions:
            if ex_type == "abs":
                try:
                    rp = os.path.relpath(val, base)
                    display_val = rp if not rp.startswith("..") else val
                except Exception:
                    display_val = val
                display = f"{display_val}  [–ø–æ–ª–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ]"
            else:  # ex_type == "name"
                display = f"{val}  [—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä—ã—Ç–æ]"
            exceptions_listbox.insert(tk.END, display)

    def select_folder():
        path = filedialog.askdirectory()
        if path:
            base_path_var.set(path)
            exceptions.clear()
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –ø–∞–ø–æ–∫ —Å —Å–æ–∫—Ä—ã—Ç—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º (—Ç–∏–ø "name")
            for name_excl in DEFAULT_NAME_EXCLUSIONS:
                exceptions.append(("name", name_excl))
            update_exceptions_listbox()
            refresh_explorer(path)

    def add_abs_exclusion():
        base_path = base_path_var.get()
        if not base_path:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.")
            return
        excl_path = filedialog.askdirectory(initialdir=base_path, title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è")
        if not excl_path:
            excl_path = filedialog.askopenfilename(initialdir=base_path, title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è")

        if excl_path:
            abs_p = os.path.abspath(excl_path)
            if ("abs", abs_p) not in exceptions:
                exceptions.append(("abs", abs_p))
                update_exceptions_listbox()

    def add_name_exclusion():
        val = simpledialog.askstring("–î–æ–±–∞–≤–∏—Ç—å –∏–º—è –ø–∞–ø–∫–∏", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:")
        if val:
            val = val.strip()
            if val and ("name", val) not in exceptions:
                exceptions.append(("name", val))
                update_exceptions_listbox()

    def remove_exception():
        selection = exceptions_listbox.curselection()
        if selection:
            idx = selection[0]
            exceptions.pop(idx)
            update_exceptions_listbox()

    def clear_exceptions():
        exceptions.clear()
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞–ø–∫–∏ —Å —Å–∫—Ä—ã—Ç—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        for name_excl in DEFAULT_NAME_EXCLUSIONS:
            exceptions.append(("name", name_excl))
        update_exceptions_listbox()

    def generate():
        base_path = base_path_var.get()
        if not base_path:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É.")
            return
        output = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt")],
            initialfile="folder_structure.txt",
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –∫–∞–∫...",
        )
        if not output:
            return
        abs_excl = [v for t, v in exceptions if t == "abs"]
        name_excl = [v for t, v in exceptions if t == "name"]
        lines = generate_tree_report(base_path, abs_excl, name_excl, output)
        output_text.delete("1.0", tk.END)
        output_text.insert(tk.END, "\n".join(lines))
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–§–∞–π–ª '{output}' —Å–æ–∑–¥–∞–Ω.")

    def refresh_explorer(path):
        output_text.delete("1.0", tk.END)
        output_text.insert(tk.END, f"–í—ã–±—Ä–∞–Ω –ø—É—Ç—å: {path}\n")

    root = tk.Tk()
    root.title("–î–µ—Ä–µ–≤–æ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏ / –ü–∞–ø–∫–∏ —Å —Å–∫—Ä—ã—Ç—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º")
    root.geometry("950x720")

    tk.Label(root, text="–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:").pack(anchor="w", padx=10, pady=(10, 0))
    base_path_var = tk.StringVar()
    tk.Entry(root, textvariable=base_path_var).pack(fill="x", padx=10)
    tk.Button(root, text="–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É", command=select_folder).pack(padx=10, pady=5)

    tk.Label(root, text="–ò—Å–∫–ª—é—á–µ–Ω–∏—è / –ü–∞–ø–∫–∏ —Å —Å–∫—Ä—ã—Ç—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:").pack(anchor="w", padx=10)
    exclusions_frame = tk.Frame(root)
    exclusions_frame.pack(fill="x", padx=10)

    exceptions_listbox = tk.Listbox(exclusions_frame, height=8, activestyle='dotbox')
    exceptions_listbox.pack(side="left", fill="both", expand=True)
    scrollbar = tk.Scrollbar(exclusions_frame, orient="vertical")
    exceptions_listbox.config(yscrollcommand=scrollbar.set)
    scrollbar.config(command=exceptions_listbox.yview)
    scrollbar.pack(side="right", fill="y")

    btn_frame = tk.Frame(exclusions_frame)
    btn_frame.pack(side="left", padx=5)

    tk.Button(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", command=add_abs_exclusion).pack(fill="x", pady=2)
    tk.Button(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å –∏–º—è –ø–∞–ø–∫–∏ (—Å–∫—Ä—ã—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)", command=add_name_exclusion).pack(fill="x", pady=2)
    tk.Button(btn_frame, text="–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ", command=remove_exception).pack(fill="x", pady=2)
    tk.Button(btn_frame, text="–°–±—Ä–æ—Å–∏—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", command=clear_exceptions).pack(fill="x", pady=2)

    tk.Button(root, text="–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –æ—Ç—á—ë—Ç–∞", command=generate, bg="#4CAF50", fg="white").pack(pady=10)

    output_text = ScrolledText(root, height=30)
    output_text.pack(fill="both", expand=True, padx=10, pady=5)

    root.mainloop()


if __name__ == "__main__":
    launch_gui()
