
# apps/business/models/business_products.py

import uuid
from django.db import models
from django.core.exceptions import ValidationError
from django.db.models import Q
from django.db.models.signals import post_delete
from django.dispatch import receiver
from mptt.models import MPTTModel, TreeForeignKey
from django.contrib.contenttypes.fields import GenericRelation, GenericForeignKey
from django.contrib.contenttypes.models import ContentType

from apps.core.models.abstract import SlugNamespaceModel, UUIDModel
from apps.business.models.business import Business
from apps.business.models.staff import Staff


# ==========================
#  –í–∞–ª—é—Ç—ã
# ==========================
class CurrencyChoice(models.TextChoices):
    """–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤–∞–ª—é—Ç"""
    BYN = "BYN", "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å"
    RUB = "RUB", "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å"
    USD = "USD", "–î–æ–ª–ª–∞—Ä –°–®–ê"
    EUR = "EUR", "–ï–≤—Ä–æ"
    PLN = "PLN", "–ü–æ–ª—å—Å–∫–∏–π –∑–ª–æ—Ç—ã–π"


# ==========================
#  –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
# ==========================
class GoodsUnit(models.TextChoices):
    PIECE = "pcs", "–®—Ç—É–∫–∞"
    KILOGRAM = "kg", "–ö–∏–ª–æ–≥—Ä–∞–º–º"
    GRAM = "g", "–ì—Ä–∞–º–º"
    LITER = "l", "–õ–∏—Ç—Ä"
    METER = "m", "–ú–µ—Ç—Ä"
    SQUARE_METER = "m2", "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä"
    CUBIC_METER = "m3", "–ö—É–±–∏—á–µ—Å–∫–∏–π –º–µ—Ç—Ä"
    PACKAGE = "pkg", "–£–ø–∞–∫–æ–≤–∫–∞"


class ServiceUnit(models.TextChoices):
    ACAD_HOUR = "acad_hour", "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —á–∞—Å"
    SESSION = "session", "–°–µ–∞–Ω—Å"
    HAIRCUT = "haircut", "–°—Ç—Ä–∏–∂–∫–∞"
    CONSULTATION = "consultation", "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
    VISIT = "visit", "–í–∏–∑–∏—Ç"
    PACKAGE = "package", "–ü–∞–∫–µ—Ç"
    SERVICE = "service", "–£—Å–ª—É–≥–∞"
    HOUR = "hour", "–ß–∞—Å"
    DAY = "day", "–î–µ–Ω—å"
    TASK = "task", "–ó–∞–¥–∞—á–∞"


# ==========================
#  –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
# ==========================
class Category(SlugNamespaceModel, MPTTModel):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞"""
    business = models.ForeignKey(
        Business,
        on_delete=models.CASCADE,
        related_name="categories",
        verbose_name="–ë–∏–∑–Ω–µ—Å",
    )
    parent = TreeForeignKey(
        "self",
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name="children",
        verbose_name="–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
    )
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)

    class MPTTMeta:
        order_insertion_by = ["title"]

    class Meta:
        constraints = [
            models.UniqueConstraint(
                fields=["namespace", "slug"],
                name="uniq_category_namespace_slug",
            )
        ]
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"

    def save(self, *args, **kwargs):
        if not self.namespace and self.business_id:
            self.namespace = self.business.slug
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.title} ({self.business})"


# ==========================
#  –ú–µ–¥–∏–∞ (–≥–∞–ª–µ—Ä–µ—è)
# ==========================
class Media(UUIDModel):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/—Ñ–∞–π–ª—ã)"""
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.UUIDField()
    content_object = GenericForeignKey("content_type", "object_id")

    file = models.FileField("–§–∞–π–ª", upload_to="uploads/%Y/%m/%d/")
    alt_text = models.CharField("–û–ø–∏—Å–∞–Ω–∏–µ", max_length=255, blank=True)
    order = models.PositiveIntegerField("–ü–æ—Ä—è–¥–æ–∫", default=0)
    is_main = models.BooleanField("–û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", default=False)
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω")

    class Meta:
        ordering = ["order"]
        verbose_name = "–ú–µ–¥–∏–∞"
        verbose_name_plural = "–ú–µ–¥–∏–∞"

    def __str__(self):
        return f"Media {self.id} ({self.content_type} - {self.object_id})"


# ==========================
#  –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –¢–æ–≤–∞—Ä–æ–≤ –∏ –£—Å–ª—É–≥.
# ==========================
class BaseProduct(SlugNamespaceModel):
    """–û–±—â–∏–µ –ø–æ–ª—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥"""
    business = models.ForeignKey(
        Business,
        on_delete=models.CASCADE,
        related_name="%(class)ss",
        verbose_name="–ë–∏–∑–Ω–µ—Å",
    )
    category = models.ForeignKey(
        Category,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="%(class)ss",
        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
    )
    # üîπ —Å–≤—è–∑—å —Å –≥–∞–ª–µ—Ä–µ–µ–π (Media)
    media = GenericRelation(
        "business.Media",
        related_query_name="%(class)s_media"  # products_media / services_media
    )

    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    price = models.DecimalField(max_digits=12, decimal_places=2, verbose_name="–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É")
    currency = models.CharField(
        max_length=3,
        choices=CurrencyChoice.choices,
        default=CurrencyChoice.BYN,
        blank=True,
        verbose_name="–í–∞–ª—é—Ç–∞",
    )
    rating = models.FloatField(default=0, help_text="–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥")
    total_likes = models.PositiveIntegerField(default=0, help_text="–í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤")
    total_dislikes = models.PositiveIntegerField(default=0, help_text="–í—Å–µ–≥–æ –¥–∏–∑–ª–∞–π–∫–æ–≤")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    is_featured = models.BooleanField(default=False, verbose_name="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω")
    sku = models.CharField(
        max_length=64,
        blank=True,
        default="",
        verbose_name="–ê—Ä—Ç–∏–∫—É–ª",
    )

    class Meta:
        abstract = True
        ordering = ["title"]

    def clean(self):
        """–ö–æ–Ω—Ç—Ä–æ–ª—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ SKU –≤ —Ä–∞–º–∫–∞—Ö –±–∏–∑–Ω–µ—Å–∞"""
        super().clean()
        if not self.sku:  # –ø—É—Å—Ç–æ–π SKU —Ä–∞–∑—Ä–µ—à–∞–µ–º
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –ø–æ –±–∏–∑–Ω–µ—Å—É –∏ SKU (–æ–±–µ –º–æ–¥–µ–ª–∏)
        product_ct = ContentType.objects.get_for_model(Product)
        service_ct = ContentType.objects.get_for_model(Service)

        conflict = (
            Product.objects.filter(business=self.business, sku=self.sku)
            .exclude(pk=self.pk)
            .exists()
            or Service.objects.filter(business=self.business, sku=self.sku)
            .exclude(pk=self.pk)
            .exists()
        )
        if conflict:
            raise ValidationError({"sku": f"–ê—Ä—Ç–∏–∫—É–ª {self.sku} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–∞–º–∫–∞—Ö –±–∏–∑–Ω–µ—Å–∞."})

    def save(self, *args, **kwargs):
        if not self.namespace and self.business_id:
            self.namespace = self.business.slug
        super().save(*args, **kwargs)

    def __str__(self):
        return self.title


# ==========================
#  –¢–æ–≤–∞—Ä—ã  Goods
# ==========================
class Product(BaseProduct):
    """–¢–æ–≤–∞—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞"""
    stock = models.PositiveIntegerField(default=0, verbose_name="–û—Å—Ç–∞—Ç–æ–∫")
    delivery_info = models.CharField(
        default="–°–∞–º–æ–≤—ã–≤–æ–∑",
        max_length=255,
        blank=True,
        null=True,
        help_text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ",
    )
    unit = models.CharField(
        max_length=10,
        choices=GoodsUnit.choices,
        default=GoodsUnit.PIECE,
        verbose_name="–ï–¥–∏–Ω–∏—Ü–∞"
    )
    image = models.ImageField("–û–±–ª–æ–∂–∫–∞", upload_to="products/covers/", blank=True, null=True)
    gallery = GenericRelation(Media, related_query_name="product")

    class Meta:
        constraints = [
            models.UniqueConstraint(fields=["namespace", "slug"], name="uniq_product_namespace_slug")
        ]
        verbose_name = "–¢–æ–≤–∞—Ä"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã"

    def __str__(self):
        return f"{self.title} ({self.business})"


# ==========================
#  –£—Å–ª—É–≥–∏
# ==========================
class Service(BaseProduct):
    """–£—Å–ª—É–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞"""
    duration = models.DurationField("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", null=True, blank=True)
    place_of_service = models.CharField(
        max_length=255,
        blank=True,
        verbose_name="–ú–µ—Å—Ç–æ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏",
        help_text="–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –¥–æ–º—É, –≤ —Å–∞–ª–æ–Ω–µ –∏ —Ç.–ø.",
    )
    staff = models.ForeignKey(
        Staff,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–ú–∞—Å—Ç–µ—Ä / —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
    )
    unit = models.CharField(
        max_length=20,
        choices=ServiceUnit.choices,
        default=ServiceUnit.SERVICE,
        verbose_name="–ï–¥–∏–Ω–∏—Ü–∞"
    )
    image = models.ImageField("–û–±–ª–æ–∂–∫–∞", upload_to="services/covers/", blank=True, null=True)
    gallery = GenericRelation(Media, related_query_name="service")

    class Meta:
        constraints = [
            models.UniqueConstraint(fields=["namespace", "slug"], name="uniq_service_namespace_slug")
        ]
        verbose_name = "–£—Å–ª—É–≥–∞"
        verbose_name_plural = "–£—Å–ª—É–≥–∏"

    def __str__(self):
        return f"{self.title} ({self.business})"


# ==========================
#  Signals: –æ—á–∏—Å—Ç–∫–∞ –º–µ–¥–∏–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
# ==========================
@receiver(post_delete, sender=Media)
def auto_delete_file_on_delete(sender, instance, **kwargs):
    """–£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ Media"""
    if instance.file:
        instance.file.delete(save=False)
